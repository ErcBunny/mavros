//
// Created by uav on 2021/10/21.
//

#include <mavros/mavros_plugin.h>
#include <pluginlib/class_list_macros.h>
#include <iostream>
//#include <std_msgs/Char.h>
//#include <std_msgs/Bool.h>                  //  use ROS msg instead of MAVROS msg ?
//#include <std_msgs/Float32.h>
#include <mavros_msgs/ActuatorOutputsDRL.h>   //  auto generated by .msg in ros1_workspace/devel/include/mavros_msgs

namespace mavros {
    namespace extra_plugins{

        class ActuatorOutputsDRLPlugin : public plugin::PluginBase {
        public:
            ActuatorOutputsDRLPlugin() : PluginBase(),
                                      nh("~actuator_outputs_drl")

            { };

            void initialize(UAS &uas_)
            {
                PluginBase::initialize(uas_);
//                keyboard_sub = nh.subscribe("keyboard_sub", 10, &ActuatorOutputsDRLPlugin::keyboard_cb, this);
                actuator_sub = nh.subscribe("actuator_sub",10,&ActuatorOutputsDRLPlugin::actuator_cb, this);  //  topic,queue,CallBackFunc
            };

            Subscriptions get_subscriptions()
            {
                return {/* RX disabled */ };
            }

        private:
            ros::NodeHandle nh;
            ros::Subscriber actuator_sub;

//            void keyboard_cb(const std_msgs::Char::ConstPtr &req)             //  keyboard plugin
//            void actuator_cb(const mavros_msgs::PlayTuneV2::ConstPtr& tune)   //  plantune pulgin
            void actuator_cb(const mavros_msgs::ActuatorOutputsDRL::ConstPtr& src_msg)
            {
//                std::cout << "Got Char : " << req->data <<  std::endl;        //  keyboard plugin
//                auto msg = mavlink::common::msg::KEY_COMMAND{};
//                msg.command = req->data;
//                UAS_FCU(m_uas)->send_message_ignore_drop(msg);

//                auto msg = mavlink::common::msg::PLAY_TUNE_V2{};              //  playtune plugin
//                m_uas->msg_set_target(msg);
//                msg.format = tune->format;
//                mavlink::set_string_z(msg.tune, tune->tune);
//                UAS_FCU(m_uas)->send_message_ignore_drop(msg);

                std::cout   << "ActuatorDRL:" << "usedrl=" << src_msg->usedrl << ","
                            << "output=" << src_msg->output[0] << src_msg->output[1] << src_msg->output[2] << src_msg->output[3] << std::endl;

                auto msg = mavlink::common::msg::ACTUATOR_OUTPUTS_DRL{};
                msg.usedrl = src_msg->usedrl;
                msg.output[0] = src_msg->output[0];
                msg.output[1] = src_msg->output[1];
                msg.output[2] = src_msg->output[2];
                msg.output[3] = src_msg->output[3];

//                m_uas->msg_set_target(msg);
//                // error: ‘struct mavlink::common::msg::Actuator_Outputs_DRL’ has no member named ‘target_system’
                UAS_FCU(m_uas)->send_message_ignore_drop(msg);

            }
        };
    }   // namespace extra_plugins
}   // namespace mavros

PLUGINLIB_EXPORT_CLASS(mavros::extra_plugins::ActuatorOutputsDRLPlugin, mavros::plugin::PluginBase)